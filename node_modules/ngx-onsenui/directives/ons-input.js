import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
/**
 * @element ons-input
 * @directive OnsInput
 * @selector ons-input
 * @description
 *   [en]Angular directive for `<ons-input>` component.[/en]
 *   [ja]`<ons-input>`要素のAngularディレクティブです。[/ja]
 * @example
 *   <ons-input [(value)]="value"></ons-input>
 */
var OnsInput = (function () {
    function OnsInput(_elementRef) {
        this._elementRef = _elementRef;
        /**
         * @output valueChange
         * @type {string}
         * @desc
         *   [en]Triggers when the value is changed.[/en]
         *   [ja]内部の`input`要素の値が変更された時に発火します。[/ja]
         */
        this._valueChange = new EventEmitter();
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('input', this._boundOnChange);
    }
    OnsInput.prototype._onChange = function (event) {
        this._valueChange.emit(this._element.value);
    };
    OnsInput.prototype.ngOnChanges = function (changeRecord) {
        var value = changeRecord['_value'].currentValue;
        if (this._element.value !== value) {
            this._element.value = value;
        }
    };
    Object.defineProperty(OnsInput.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsInput.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsInput.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('input', this._boundOnChange);
        this._element = null;
    };
    return OnsInput;
}());
export { OnsInput };
OnsInput.decorators = [
    { type: Directive, args: [{
                selector: 'ons-input'
            },] },
];
/** @nocollapse */
OnsInput.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
OnsInput.propDecorators = {
    '_value': [{ type: Input, args: ['value',] },],
    '_valueChange': [{ type: Output, args: ['valueChange',] },],
};
//# sourceMappingURL=ons-input.js.map