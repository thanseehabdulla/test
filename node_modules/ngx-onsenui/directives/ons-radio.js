import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * @element ons-radio
 * @directive OnsRadio
 * @selector ons-radio
 * @description
 *   [en]Angular directive for `<ons-radio>` component. You can use `[(ngModel)]` to synchronize the value of `[(ngModel)]` with the selected value.[/en]
 *   [ja]`<ons-radio>`要素のAngularディレクティブです。 `[(ngModel)]` を使用すると、 `[(ngModel)]` の値を選択された値と同期することができます。[/ja]
 * @example
 *   <ons-radio value="Item A" [(ngModel)]="selectedValue"></ons-radio>
 *   <ons-radio value="Item B" [(ngModel)]="selectedValue"></ons-radio>
 *   <ons-radio value="Item C" [(ngModel)]="selectedValue"></ons-radio>
 */
var OnsRadio = (function () {
    function OnsRadio(_elementRef) {
        this._elementRef = _elementRef;
        this._propagateChange = function (_) { };
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('change', this._boundOnChange);
    }
    OnsRadio.prototype._onChange = function (event) {
        var _a = event.target, value = _a.value, checked = _a.checked;
        checked && this._propagateChange(value);
    };
    Object.defineProperty(OnsRadio.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsRadio.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsRadio.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('change', this._boundOnChange);
        this._element = null;
    };
    OnsRadio.prototype.writeValue = function (obj) {
        this._element.checked = (obj === this._element.value);
    };
    OnsRadio.prototype.registerOnChange = function (fn) {
        this._propagateChange = fn;
    };
    OnsRadio.prototype.registerOnTouched = function () { };
    return OnsRadio;
}());
export { OnsRadio };
OnsRadio.decorators = [
    { type: Directive, args: [{
                selector: 'ons-radio',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return OnsRadio; }),
                        multi: true,
                    }
                ]
            },] },
];
/** @nocollapse */
OnsRadio.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
//# sourceMappingURL=ons-radio.js.map