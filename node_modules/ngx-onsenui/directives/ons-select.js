import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ons from 'onsenui';
/**
 * @element ons-select
 * @directive OnsSelect
 * @selector ons-select
 * @description
 *   [en]Angular directive for `<ons-select>` component.[/en]
 *   [ja]`<ons-select>`要素のAngularディレクティブです。[/en]
 * @example
 *   <ons-select [(ngModel)]="selectedValue">
 *     <option value="Item A">Item A</option>
 *     <option value="Item B">Item B</option>
 *     <option value="Item C">Item C</option>
 *   </ons-select>
 */
var OnsSelect = (function () {
    function OnsSelect(_elementRef) {
        this._elementRef = _elementRef;
        this._propagateChange = function (_) { };
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('change', this._boundOnChange);
    }
    OnsSelect.prototype._onChange = function (event) {
        this._propagateChange(event.target.value);
    };
    Object.defineProperty(OnsSelect.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSelect.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsSelect.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('change', this._boundOnChange);
        this._element = null;
    };
    OnsSelect.prototype.writeValue = function (obj) {
        var _this = this;
        // When this statement is first evaluated, the inner <select> element is not ready,
        // so contentReady is required in this case
        ons._contentReady(this._element, function () {
            _this._element.value = obj;
        });
    };
    OnsSelect.prototype.registerOnChange = function (fn) {
        this._propagateChange = fn;
    };
    OnsSelect.prototype.registerOnTouched = function () { };
    return OnsSelect;
}());
export { OnsSelect };
OnsSelect.decorators = [
    { type: Directive, args: [{
                selector: 'ons-select',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return OnsSelect; }),
                        multi: true,
                    }
                ]
            },] },
];
/** @nocollapse */
OnsSelect.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
//# sourceMappingURL=ons-select.js.map