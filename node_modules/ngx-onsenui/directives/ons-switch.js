import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
/**
 * @element ons-switch
 * @directive OnsSwitch
 * @selector ons-switch
 * @description
 *   [en]Angular directive for `<ons-switch>` component.[/en]
 *   [ja]`<ons-switch>`要素のAngularディレクティブです。[/ja]
 * @example
 *   <ons-switch [(value)]="target"></ons-switch>
 */
var OnsSwitch = (function () {
    function OnsSwitch(_elementRef) {
        this._elementRef = _elementRef;
        /**
         * @output valueChange
         * @type {string}
         * @desc
         *   [en]Triggers when the value is changed.[/en]
         *   [ja]値が変更された時に発火します。[/ja]
         */
        this._valueChange = new EventEmitter();
        this._boundOnChange = this._onChange.bind(this);
        this._element = _elementRef.nativeElement;
        this._element.addEventListener('change', this._boundOnChange);
    }
    Object.defineProperty(OnsSwitch.prototype, "value", {
        /**
         * @input value
         * @type {boolean}
         * @desc
         *   [en]Specify the value of the `<ons-switch>` component.[/en]
         *   [ja]`ons-switch`コンポーネントに設定する値を指定します。[/ja]
         */
        set: function (target) {
            this._element.checked = !!target;
        },
        enumerable: true,
        configurable: true
    });
    OnsSwitch.prototype._onChange = function (event) {
        this._valueChange.emit(this._element.checked);
    };
    OnsSwitch.prototype.ngOnChanges = function (changeRecord) {
        var value = !!changeRecord.value.currentValue;
        this._element.checked = value;
    };
    Object.defineProperty(OnsSwitch.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OnsSwitch.prototype, "nativeElement", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    OnsSwitch.prototype.ngOnDestroy = function () {
        this._element.removeEventListener('change', this._boundOnChange);
        this._element = null;
    };
    return OnsSwitch;
}());
export { OnsSwitch };
OnsSwitch.decorators = [
    { type: Directive, args: [{
                selector: 'ons-switch'
            },] },
];
/** @nocollapse */
OnsSwitch.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
OnsSwitch.propDecorators = {
    'value': [{ type: Input, args: ['value',] },],
    '_valueChange': [{ type: Output, args: ['valueChange',] },],
};
//# sourceMappingURL=ons-switch.js.map